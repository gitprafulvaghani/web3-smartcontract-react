{"ast":null,"code":"// import NFTContractBuild from 'contracts/NFT.json';\nimport Web3 from 'web3';\nlet selectedAccount;\n\n// let nftContract;\nlet erc20Contract;\nlet isInitialized = false;\nexport const init = async () => {\n  let provider = window.ethereum;\n  if (typeof provider !== 'undefined') {\n    provider.request({\n      method: 'eth_requestAccounts'\n    }).then(accounts => {\n      selectedAccount = accounts[0];\n      console.log(`Selected account is ${selectedAccount}`);\n    }).catch(err => {\n      console.log(err);\n      return;\n    });\n    window.ethereum.on('accountsChanged', function (accounts) {\n      selectedAccount = accounts[0];\n      console.log(`Selected account changed to ${selectedAccount}`);\n    });\n  }\n  const web3 = new Web3(provider);\n  const networkId = await web3.eth.net.getId();\n\n  // nftContract = new web3.eth.Contract(\n  // \tNFTContractBuild.abi,\n  // \tNFTContractBuild.networks[networkId].address\n  // );\n\n  const erc20Abi = [{\n    constant: true,\n    inputs: [{\n      name: '_owner',\n      type: 'address'\n    }],\n    name: 'balanceOf',\n    outputs: [{\n      name: 'balance',\n      type: 'uint256'\n    }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  }];\n  erc20Contract = new web3.eth.Contract(erc20Abi,\n  // Dai contract on Rinkeby\n  '0x5592ec0cfb4dbc12d3ab100b257153436a1f0fea');\n  isInitialized = true;\n};\nexport const getOwnBalance = async () => {\n  if (!isInitialized) {\n    await init();\n  }\n  return erc20Contract.methods.balanceOf(selectedAccount).call().then(balance => {\n    return Web3.utils.fromWei(balance);\n  });\n};\n\n// export const mintToken = async () => {\n// \tif (!isInitialized) {\n// \t\tawait init();\n// \t}\n\n// \treturn nftContract.methods\n// \t\t.mint(selectedAccount)\n// \t\t.send({ from: selectedAccount });\n// };","map":{"version":3,"names":["Web3","selectedAccount","erc20Contract","isInitialized","init","provider","window","ethereum","request","method","then","accounts","console","log","catch","err","on","web3","networkId","eth","net","getId","erc20Abi","constant","inputs","name","type","outputs","payable","stateMutability","Contract","getOwnBalance","methods","balanceOf","call","balance","utils","fromWei"],"sources":["/Users/imac/Documents/web3-react-app/web3-tutorials/01-interacting-with-smart-contracts/src/Web3Client.js"],"sourcesContent":["// import NFTContractBuild from 'contracts/NFT.json';\nimport Web3 from 'web3';\n\nlet selectedAccount;\n\n// let nftContract;\nlet erc20Contract;\n\nlet isInitialized = false;\n\nexport const init = async () => {\n\tlet provider = window.ethereum;\n\n\tif (typeof provider !== 'undefined') {\n\t\tprovider\n\t\t\t.request({ method: 'eth_requestAccounts' })\n\t\t\t.then((accounts) => {\n\t\t\t\tselectedAccount = accounts[0];\n\t\t\t\tconsole.log(`Selected account is ${selectedAccount}`);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treturn;\n\t\t\t});\n\n\t\twindow.ethereum.on('accountsChanged', function (accounts) {\n\t\t\tselectedAccount = accounts[0];\n\t\t\tconsole.log(`Selected account changed to ${selectedAccount}`);\n\t\t});\n\t}\n\n\tconst web3 = new Web3(provider);\n\n\tconst networkId = await web3.eth.net.getId();\n\n\t// nftContract = new web3.eth.Contract(\n\t// \tNFTContractBuild.abi,\n\t// \tNFTContractBuild.networks[networkId].address\n\t// );\n\n\tconst erc20Abi = [\n\t\t{\n\t\t\tconstant: true,\n\t\t\tinputs: [\n\t\t\t\t{\n\t\t\t\t\tname: '_owner',\n\t\t\t\t\ttype: 'address'\n\t\t\t\t}\n\t\t\t],\n\t\t\tname: 'balanceOf',\n\t\t\toutputs: [\n\t\t\t\t{\n\t\t\t\t\tname: 'balance',\n\t\t\t\t\ttype: 'uint256'\n\t\t\t\t}\n\t\t\t],\n\t\t\tpayable: false,\n\t\t\tstateMutability: 'view',\n\t\t\ttype: 'function'\n\t\t}\n\t];\n\n\terc20Contract = new web3.eth.Contract(\n\t\terc20Abi,\n\t\t// Dai contract on Rinkeby\n\t\t'0x5592ec0cfb4dbc12d3ab100b257153436a1f0fea'\n\t);\n\n\tisInitialized = true;\n};\n\nexport const getOwnBalance = async () => {\n\tif (!isInitialized) {\n\t\tawait init();\n\t}\n\n\treturn erc20Contract.methods\n\t\t.balanceOf(selectedAccount)\n\t\t.call()\n\t\t.then((balance) => {\n\t\t\treturn Web3.utils.fromWei(balance);\n\t\t});\n};\n\n// export const mintToken = async () => {\n// \tif (!isInitialized) {\n// \t\tawait init();\n// \t}\n\n// \treturn nftContract.methods\n// \t\t.mint(selectedAccount)\n// \t\t.send({ from: selectedAccount });\n// };\n"],"mappings":"AAAA;AACA,OAAOA,IAAI,MAAM,MAAM;AAEvB,IAAIC,eAAe;;AAEnB;AACA,IAAIC,aAAa;AAEjB,IAAIC,aAAa,GAAG,KAAK;AAEzB,OAAO,MAAMC,IAAI,GAAG,MAAAA,CAAA,KAAY;EAC/B,IAAIC,QAAQ,GAAGC,MAAM,CAACC,QAAQ;EAE9B,IAAI,OAAOF,QAAQ,KAAK,WAAW,EAAE;IACpCA,QAAQ,CACNG,OAAO,CAAC;MAAEC,MAAM,EAAE;IAAsB,CAAC,CAAC,CAC1CC,IAAI,CAAEC,QAAQ,IAAK;MACnBV,eAAe,GAAGU,QAAQ,CAAC,CAAC,CAAC;MAC7BC,OAAO,CAACC,GAAG,CAAC,uBAAuBZ,eAAe,EAAE,CAAC;IACtD,CAAC,CAAC,CACDa,KAAK,CAAEC,GAAG,IAAK;MACfH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;MAChB;IACD,CAAC,CAAC;IAEHT,MAAM,CAACC,QAAQ,CAACS,EAAE,CAAC,iBAAiB,EAAE,UAAUL,QAAQ,EAAE;MACzDV,eAAe,GAAGU,QAAQ,CAAC,CAAC,CAAC;MAC7BC,OAAO,CAACC,GAAG,CAAC,+BAA+BZ,eAAe,EAAE,CAAC;IAC9D,CAAC,CAAC;EACH;EAEA,MAAMgB,IAAI,GAAG,IAAIjB,IAAI,CAACK,QAAQ,CAAC;EAE/B,MAAMa,SAAS,GAAG,MAAMD,IAAI,CAACE,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;;EAE5C;EACA;EACA;EACA;;EAEA,MAAMC,QAAQ,GAAG,CAChB;IACCC,QAAQ,EAAE,IAAI;IACdC,MAAM,EAAE,CACP;MACCC,IAAI,EAAE,QAAQ;MACdC,IAAI,EAAE;IACP,CAAC,CACD;IACDD,IAAI,EAAE,WAAW;IACjBE,OAAO,EAAE,CACR;MACCF,IAAI,EAAE,SAAS;MACfC,IAAI,EAAE;IACP,CAAC,CACD;IACDE,OAAO,EAAE,KAAK;IACdC,eAAe,EAAE,MAAM;IACvBH,IAAI,EAAE;EACP,CAAC,CACD;EAEDxB,aAAa,GAAG,IAAIe,IAAI,CAACE,GAAG,CAACW,QAAQ,CACpCR,QAAQ;EACR;EACA,4CACD,CAAC;EAEDnB,aAAa,GAAG,IAAI;AACrB,CAAC;AAED,OAAO,MAAM4B,aAAa,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI,CAAC5B,aAAa,EAAE;IACnB,MAAMC,IAAI,CAAC,CAAC;EACb;EAEA,OAAOF,aAAa,CAAC8B,OAAO,CAC1BC,SAAS,CAAChC,eAAe,CAAC,CAC1BiC,IAAI,CAAC,CAAC,CACNxB,IAAI,CAAEyB,OAAO,IAAK;IAClB,OAAOnC,IAAI,CAACoC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC;EACnC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}